{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/catherinelee/Documents/gt/cs4261/Communiteer/src/Stats/Charts/MonthlyHours.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { LineChart, Path, Grid } from \"react-native-svg-charts\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nvar window = Dimensions.get(\"window\");\nvar screen = Dimensions.get(\"screen\");\n\nvar LineChartExample = function (_React$PureComponent) {\n  _inherits(LineChartExample, _React$PureComponent);\n\n  var _super = _createSuper(LineChartExample);\n\n  function LineChartExample() {\n    _classCallCheck(this, LineChartExample);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LineChartExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var data = [50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80];\n\n      var Shadow = function Shadow(_ref) {\n        var line = _ref.line;\n        return React.createElement(Path, {\n          key: \"shadow\",\n          y: 2,\n          d: line,\n          fill: \"none\",\n          strokeWidth: 4,\n          stroke: \"rgba(134, 65, 244, 0.2)\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 7\n          }\n        });\n      };\n\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }\n      }, React.createElement(LineChart, {\n        style: {\n          height: screen.height / 2,\n          width: screen.width / 2,\n          padding: 10\n        },\n        data: data,\n        svg: {\n          stroke: \"rgb(134, 65, 244)\"\n        },\n        contentInset: {\n          top: 20,\n          bottom: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }\n      }, React.createElement(Grid, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }\n      }), React.createElement(Shadow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return LineChartExample;\n}(React.PureComponent);\n\nexport default LineChartExample;","map":{"version":3,"sources":["/Users/catherinelee/Documents/gt/cs4261/Communiteer/src/Stats/Charts/MonthlyHours.js"],"names":["React","LineChart","Path","Grid","window","Dimensions","get","screen","LineChartExample","data","Shadow","line","height","width","padding","stroke","top","bottom","PureComponent"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,IAA1B,QAAsC,yBAAtC;;;;;;;;;AAGA,IAAMC,MAAM,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAf;AACA,IAAMC,MAAM,GAAGF,UAAU,CAACC,GAAX,CAAe,QAAf,CAAf;;IAGME,gB;;;;;;;;;;;;;6BAEK;AAAA;;AAEP,UAAMC,IAAI,GAAG,CAAE,EAAF,EAAM,EAAN,EAAU,EAAV,EAAc,EAAd,EAAkB,CAAC,CAAnB,EAAsB,CAAC,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,CAAC,EAA5C,EAAgD,EAAhD,EAAoD,EAApD,EAAwD,CAAC,EAAzD,EAA6D,CAAC,EAA9D,CAAb;;AAEA,UAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,YAAGC,IAAH,QAAGA,IAAH;AAAA,eACb,oBAAC,IAAD;AACE,UAAA,GAAG,EAAE,QADP;AAEE,UAAA,CAAC,EAAE,CAFL;AAGE,UAAA,CAAC,EAAEA,IAHL;AAIE,UAAA,IAAI,EAAE,MAJR;AAKE,UAAA,WAAW,EAAE,CALf;AAME,UAAA,MAAM,EAAE,yBANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADa;AAAA,OAAf;;AAWA,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAG;AAAEC,UAAAA,MAAM,EAAEL,MAAM,CAACK,MAAP,GAAc,CAAxB;AAA2BC,UAAAA,KAAK,EAAEN,MAAM,CAACM,KAAP,GAAa,CAA/C;AAAkDC,UAAAA,OAAO,EAAE;AAA3D,SADV;AAEE,QAAA,IAAI,EAAGL,IAFT;AAGE,QAAA,GAAG,EAAE;AAAEM,UAAAA,MAAM,EAAE;AAAV,SAHP;AAIE,QAAA,YAAY,EAAG;AAAEC,UAAAA,GAAG,EAAE,EAAP;AAAWC,UAAAA,MAAM,EAAE;AAAnB,SAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAOE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,CADF,CADF;AAeD;;;;EAhC4BjB,KAAK,CAACkB,a;;AAoCrC,eAAeV,gBAAf","sourcesContent":["import React from \"react\";\nimport { LineChart, Path, Grid } from \"react-native-svg-charts\";\nimport { Dimensions, StyleSheet, ScrollView, Button, View, SafeAreaView, Text, Alert } from \"react-native\";\n\nconst window = Dimensions.get(\"window\");\nconst screen = Dimensions.get(\"screen\");\n\n\nclass LineChartExample extends React.PureComponent {\n\n  render() {\n\n    const data = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ];\n\n    const Shadow = ({ line }) => (\n      <Path\n        key={\"shadow\"}\n        y={2}\n        d={line}\n        fill={\"none\"}\n        strokeWidth={4}\n        stroke={\"rgba(134, 65, 244, 0.2)\"}\n      />\n    );\n\n    return (\n      <View>\n        <LineChart\n          style={ { height: screen.height/2, width: screen.width/2, padding: 10}}\n          data={ data }\n          svg={{ stroke: \"rgb(134, 65, 244)\" }}\n          contentInset={ { top: 20, bottom: 20 } }\n        >\n          <Grid/>\n          <Shadow/>\n        </LineChart>\n\n      </View>\n\n    );\n  }\n\n}\n\nexport default LineChartExample;"]},"metadata":{},"sourceType":"module"}